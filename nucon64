#!/usr/bin/perl
# The worst program ever.
# doesn't do much that ucon64 does :P
#
# You need ucon64. I assume you have a gd3-7, but you can
# use others too (just search for '@cmd' in the source)
# 
# Bugs:
# 	- infobox window is gay
#	- you're gay
#	- DB code doesn't skip duplicates with -scan
#	  ..and blindly adds duplicate entries..
#	- pork?
#	- vscrollbar won't respect bg color (so I changed the colors for now)
# Ideas:
# 	- use scrollbar for filename in textviewer

use warnings;
use strict;
use Curses::UI;
use Curses::UI::Listbox;
use Curses::UI::Color;

use DBI;
use Getopt::Long;
use Data::Dumper;

use constant PROG_VERSION => scalar('0.1');
use constant DB_FILENAME => $ENV{HOME} . '/.nucon64.sql';

my %roms;     # ROM cache
my %menu;     # Menu index + menu title
my %menu_map; # Mapper for menu number <> rom ID
my $rom_count;

sub create_table{

	my $dbh = shift;

	$dbh->do("
		 CREATE TABLE IF NOT EXISTS roms (
			ID INTEGER PRIMARY KEY AUTOINCREMENT, 
       			crc      CHAR(128), 
			file     TEXT, 
			category TEXT, 
			system   TEXT, 
			title    TEXT, 
			region   TEXT, 
			size     INTEGER, 
			source   TEXT,
			has_dat  BOOLEAN,
			ok_dump  BOOLEAN
		 )");

}

sub add_entry{
	my $dbh = shift;
	my %rom = @_;

	my @to_name;
	my @to_data;
	foreach (keys %rom) {
		my $val = $rom{$_};
		push @to_name, "'$_'";
		push @to_data, $dbh->quote($val);

	}

	$dbh->do("INSERT INTO roms
		 	(" . (join ',', @to_name) . ") 
		 VALUES 
		 	(" . (join ',', @to_data) . ")");
}

sub del_entry{
	my ($dbh, $id) = @_;
	$dbh->do(sprintf("DELETE FROM roms WHERE id = %d", $id));
}

sub set_entry{
	my ($dbh, $id, %stuff) = @_;

	my @tmp;
	foreach (keys %stuff) {
		push @tmp, "$_ = "  . $dbh->quote($stuff{$_});
	}

	$dbh->do("UPDATE roms SET
		 	@tmp
		 WHERE
		 	id = $id");
}

sub get_entry{
	my ($dbh, $id) = @_;

	my @res = $dbh->selectrow_array("SELECT id, crc, file, category, 
						system, title, region, size, 
						source, has_dat, ok_dump
					FROM 
						roms
					WHERE
						id = $id"); # XXX strip quotes? make numeric?  meh.

	return @res;
}

sub get_all_roms{
	my $dbh = shift;
	my %out;

	$| = 0; print "Please wait..";

	my $res = $dbh->selectall_arrayref("SELECT id, crc, file, category, 
						system, title, region, size, 
						source, has_dat, ok_dump
					   FROM 
					   	roms");

	foreach (@$res) {

		my ($id, $crc32, $file, $category, 
		    $system, $title, $region, $size,
		    $source, $has_dat, $ok_dump) = @$_;

		my %tmp = ('file'   => $file,
			   'category' => $category,
			   'crc'    => $crc32, 
			   'system' => $system, 
			   'title'  => $title, 
			   'region' => $region, 
			   'size'   => $size, 
			   'source' => $source,
			   'has_dat'=> $has_dat,
			   'ok_dump'=> $ok_dump);

		$out{$id} = \%tmp;
	}

	$| = 1; print "ok.\n";

	return %out;
}

# Terrible.
sub find_roms{
	my ($dbh, $search_path) = @_;
	print "Plz wait, I'm stoned so this'll be slow..\n";

	my @file_list = (`find $search_path -type f -iname "*.smc"`);
	chomp @file_list;

# Stuffs
	foreach my $file (@file_list) {

		my $category = (split '/', $file)[-2];

		my ($rom, $crc32, $system, $title, $region, $size, $source, $ok_dump);
		$rom = $crc32 = $system = $title = $region = $size = 
		$source = '?';
		$ok_dump = 0;

		my @stuffs = `ucon64 --lsd \"$file\"`;

		splice @stuffs, 0, 4;  # Remove ucon introduction
		s/\n$//s for @stuffs;  # Remove newline
		s/^\s+//s for @stuffs; # Remove prepended whitespaces
		s/^\t//s for @stuffs;  # Remove prepended whitespaces

		my $norom = $stuffs[2] =~/No ROM/;
		splice @stuffs, 2, 1;  # Remove DAT line

		if($norom) { # (Probably still usable though)
			$title = $stuffs[0];
			$title =~tr/_/ /;
			$title = substr $title, 0, rindex($title, '.');
			$title =~s/\(.*?\)//gs;
			$title =~s/\[.*?\]//gs;

			$size = -s $file;

			print "\e[1;31mBad\e[0m ROM: $title\n"
		}else{
			print (join "\n", @stuffs) . "\n";
			my ($tmpa, $tmpb);
			($rom, $crc32, $system, $title, $region, $size, $tmpa, $tmpb) = 
				@stuffs;

			if($tmpa =~m/Flags: Verified good dump/) {
				$ok_dump = 1;
				$source  = $tmpb;
			}else {
				$source  = $tmpa;
			}

			$title =~s/\(.*?\)//gs;
			$title =~s/\[.*?\]//gs;

			my $tmplen = rindex $crc32, ' ';
			$crc32 = substr $crc32, $tmplen + 1, length($crc32) - $tmplen;

			$size = substr $size, 0, index($size, ' ');

			print "\e[1;32mGood\e[0m ROM: $title\n";

		}

		my %tmp =('file'   => $file,
			  'category' => $category,
			  'crc'    => $crc32, 
			  'system' => $system, 
			  'title'  => $title, 
			  'region' => $region, 
			  'size'   => $size, 
			  'source' => $source,
			  'has_dat'=> ! $norom,
			  'ok_dump'=> $ok_dump) ;

		add_entry($dbh, %tmp);

		undef %tmp;
		undef @stuffs;

	}
}

###############################################################################

sub user_select {
	my ($cui, $obj) = @_;

	my $item = $obj->get_active_value(); # could be id as well..

	my $id = $menu_map{$item};

	$cui->leave_curses();

	my $title = $roms{$id}->{title};
	my $title_len = length $title;
	my $separator = (' 'x(78 - $title_len));
	print "\n\e[4m$title$separator\e[0m\n\n";

	my @cmd = ('ucon64', 
		   '--xgd6',
		   $roms{$id}->{file});

	print ">@cmd\n";

	system @cmd;
	print "\e[1;37mPress return to continue\e[0m";
	my $tmp = <>;

	$cui->reset_curses();
}

sub user_move {
	my ($cui, $obj, $i) = @_;

	my $item;

	if(defined $obj) {
		$item = $obj->get_active_value();
	} else {
		$item = 0;
	}
	
	$obj->{-title} = sprintf("Select ROM (%d/%d)", 1 + $item, $rom_count);

	my $rom = $roms{$menu_map{$item}};

	my $text = sprintf("%s\n" .
			   "Size %2.0fM (%2.1fMiB, %7db)",
			   $rom->{file},
			   $rom->{size} / 1024 / 8 / 8,
			   $rom->{size} / 1024 / 1024,
			   $rom->{size});

	if($rom->{crc} ne '?') {
		$text .= sprintf(" crc32 = %s",
				 $rom->{crc});
	} 

	if($rom->{region} ne '?') {
     		$text .= " Region = $rom->{region}";
	}
	
	$text .= "\n";

	if($rom->{source} ne '?') {
		$text .= sprintf("From %s (%s dump)",
				 $rom->{source},
				 $rom->{ok_dump} == 1 ? "good" : "bad");
	}

	$text .= "\n"; # FIXME HACK

	$i->{-text} = $text;
	#$i->{-bg} = $i->{-bbg} = $rom->{ok_dump} == 1 ? 'blue' : 'grey';
	$i->draw();

}
###############################################################################

my $search_path = '';

my $dbh = DBI->connect('dbi:SQLite:' . DB_FILENAME) or 
die "No DB found; create a new one with -scan <path>";

create_table($dbh); # Creates if nonexistent

GetOptions('scan|s=s' => \$search_path);

# Populate db if -scan is selected
find_roms($dbh, $search_path) if $search_path ne '';

# Populate cache
%roms = get_all_roms($dbh);

$rom_count = (keys %roms);
die "No roms found. Try -scan <path>" if $rom_count == 0;
print "$rom_count roms.\n";

# Generate menu
my $count = 0;
foreach (sort {$roms{$b} <=> $roms{$a}} (keys %roms)) {
	my $highlight = $roms{$_}->{ok_dump} ? 'bold' : 'dim';
	$menu{$count} = sprintf("(<bold>%s</bold>) <%s>%s</%s>", 
				$roms{$_}->{category}, 
				$highlight,
				$roms{$_}->{title},
				$highlight);
	$menu_map{$count} = $_;

	$count++
}

# Widget
my $cui = Curses::UI->new(-color_support => 1,
			  -clear_on_exit => 0);



my $win = $cui->add('window_id', 'Window',
			-border      => 0);

my $infobox = $win->add('myinfobox', 'TextViewer',
			-border      => 1,
			-title       => "Information",
			-height      => 6,
			-bg          => 'black',
			-fg          => 'white', 
			-bfg         => 'blue',
			-bbg         => 'black',
			-tfg         => 'blue',
			-tbg         => 'black');

my $listbox = $win->add('mylistbox', 'Listbox', 
			-border      => 1,
			-title       => sprintf("Select ROM (" .
						"%d/%d)", 1, $rom_count),
			-height      => $cui->height - 6,
			-y           => 6,
			-onchange    => sub{ user_select($cui, shift) },
			-onselchange => sub{ user_move($cui, shift, $infobox) },
			-bg          => 'black',
			-fg          => 'white', 
			-bfg         => 'white',
			-bbg         => 'blue',
			-tfg         => 'blue',
			-tbg         => 'black',
			-radio       => 0,
			-wraparound  => 0,
			-values      => [0..(keys %menu) - 1],
			-labels      => \%menu,
			-htmltext    => 1,
			-vscrollbar  => 'right',
			-sbg         => 'red',
			-sfg         => 'red');

$listbox->{-sfg} = 'blue';
$listbox->{-sbg} = 'red';
$listbox->{-bbg} = 'black';
$listbox->{-bfg} = 'blue';

# Populate Information box
user_move($cui, undef, $infobox);

$cui->set_binding(\&exit, 'q');
$infobox->draw();
$listbox->focus();
$listbox->draw();
$cui->mainloop;
